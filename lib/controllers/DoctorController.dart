import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';

import '../models/Doctor.dart';

class DoctorController {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  Doctor? loggedInDoctor;


  //register doctor with both firebase auth and collection
  Future<String?> registerDoctor(Doctor doctor, String password) async {
    try {
      // Create the user with Firebase Authentication
      UserCredential userCredential = await _auth
          .createUserWithEmailAndPassword(
        email: doctor.email,
        password: password,
      );

      // Get the unique user ID generated by Firebase Auth
      String uid = userCredential.user?.uid ?? '';

      // Add the doctor to Firestore with the UID as the document ID
      try {
        await _firestore.collection('doctors').doc(uid).set(doctor.toMap());
        print("Document successfully written!");
      } catch (e) {
        print("Error writing document: $e");
      }
      return null; // Signifies successful registration
    } on FirebaseAuthException catch (e) {
      return e.message; // Return the error message if registration fails
    } catch (e) {
      return 'An unknown error occurred.';
    }
  }

  Future<String?> loginDoctor(String email, String password) async {
    try {
      // Authenticate the user
      UserCredential userCredential = await _auth.signInWithEmailAndPassword(
        email: email,
        password: password,
      );

      // Retrieve the UID and fetch Doctor data from Firestore
      String uid = userCredential.user?.uid ?? '';
      DocumentSnapshot doctorSnapshot = await _firestore.collection('doctors')
          .doc(uid)
          .get();

      if (doctorSnapshot.exists) {
        loggedInDoctor =
            Doctor.fromMap(doctorSnapshot.data() as Map<String, dynamic>, uid);
        return null; // Signifies successful login
      } else {
        return "Doctor data not found in Firestore.";
      }
    } on FirebaseAuthException catch (e) {
      return e.message; // Return the error message if login fails
    } catch (e) {
      return 'An unknown error occurred.';
    }
  }

  // Get the logged-in doctor
  Doctor? get currentDoctor => loggedInDoctor;

  //method to upload the image
  Future<String?> uploadProfilePicture(String doctorId, String imageUrl) async {
    try {
      //update the profile picture url in firestore
      await _firestore.collection('doctors').doc(doctorId).update({
        'profilePicture': imageUrl,
      });
      return imageUrl;
    } catch (e) {
      print('Error uploading image: $e');
      return null;
    }
  }

  //method to update the doctors name
  Future<String?> updateName(String doctorId, String newName) async {
    try {
      //update the profile picture url in firestore
      await _firestore.collection('doctors').doc(doctorId).update({
        'name': newName,
      });
      return null;
    } catch (e) {

      return ('$e');
    }
  }

  // Method to load doctor data using user ID (UID)
  Future<String?> loadDoctorDataById(String userId) async {
    try {
      // Fetch the patient data from Firestore using the user ID
      DocumentSnapshot doctorSnapshot = await _firestore.collection('doctors').doc(userId).get();

      if (doctorSnapshot.exists) {
        // If data exists, return a Patient object
        loggedInDoctor =  Doctor.fromMap(doctorSnapshot.data() as Map<String, dynamic>, userId);
        return null;
      } else {
        // If no data exists for the user, return null
        return "Doctor  data not found in Firestore.";
      }
    } catch (e) {
      return 'An unknown error occurred.';
    }
  }
}

